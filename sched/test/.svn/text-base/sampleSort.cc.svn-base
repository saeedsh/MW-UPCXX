
//
// arch-tag: 2dcf5618-b51f-4a04-9f3a-86ab829bc7d8
//

#include <stdlib.h>
#include <cmath>

#include "ThreadPool.hh"
#include "machine-config.hh"
#include "sequence.hh"
#include "transpose.hh"
#include "sampleSort.hh"
#include "string.h"
//#include "utils.hh"
#include "parse-args.hh"
//#include "getperf.hh"

template <class T>
class PtrCmpLess {
public:
  inline bool operator() (const T& x, const T& y) const {return *x<*y;}
};

template <class T>
class PtrCmpLessEq {
public:
  inline bool operator() (const T& x, const T& y) const {return *x<=*y;}
};

template <class E>
lluint allocSize (int n, double exp) {
  lluint size =0 ;
  int sq = (int)(pow(n,exp));
  int rowSize = sq*AVG_SEG_SIZE;
  int numR = (int)ceil(((double)n)/((double)rowSize));
  int numSegs = (sq-1)/PIVOT_QUOT;

  int  sampleSetSize = numSegs*OVERSAMPLE;
  size += sizeof(E)*sampleSetSize;
  size += sizeof(E)*(numSegs-1);
  size += sizeof(E)*(numR*rowSize);
  size += 3*sizeof(int)*(numR*numSegs+1);
  return size;
}

#define E double

int
main (int argv, char **argc) {
  int LEN = (-1==get_size(argv, argc,2)) ? (1<<25) : get_size(argv, argc,2);
  double exp = (double) ((-1==get_size(argv, argc,3)) ? 50 : get_size(argv, argc,3));
  exp/=100.0;

  Scheduler *sched=create_scheduler(argv, argc);
  
  E** A_ptr = new E*[LEN];
  E* A = new E[LEN];
  //stripe_teach((char*)A_ptr,sizeof(E*)*LEN);
  //stripe_teach((char*)A,sizeof(E*)*LEN);
  for (int i=0; i<LEN; ++i) {
    A[i] = rand();
    A_ptr[i] = A+hash(i,LEN);
  }

  //int hugepage_id = alloc_hugetlb(allocSize<E>(LEN,exp));
  //char *space = (char*)translate_hugetlb(hugepage_id);
  //char *space = newA(char, allocSize<E>(LEN,exp));
  //stripe_teach(space,allocSize<E>(LEN,exp));

  SizedJob* root_job = new SampleSort<E*, PtrCmpLess<E*> >(A_ptr,LEN,PtrCmpLess<E*>(),exp,NULL);//space);
  std::cout<<"Len: "<<LEN<<" exp: "<<exp<<std::endl;
  std::cout<<"Size: "<<root_job->size(64)/1000000.<<"MB"<<std::endl;  
  flush_cache(num_procs,sizes[1]);

  startTime();
  tp_init (num_procs, map, sched, root_job);
  tp_sync_all ();
  nextTime ("SampleSort, from the driver program");

if(false) {
  if (checkSort (A_ptr,LEN,PtrCmpLessEq<E*>()))
    std::cout<<"Good"<<std::endl;
  else
    std::cout<<"Bad"<<std::endl;
}

  //free_hugetlb(hugepage_id);
  free(A_ptr);
  free(A);
  
}
