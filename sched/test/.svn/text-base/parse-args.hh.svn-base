#include "ThreadPool.hh"
#include "machine-config.hh"
#include "errno.h"
void
print_usage () {
      std::cerr<<"Usage: cmd <Sched:W/P/H/2/3/4> <args>"<<std::endl;	
}

FIND_MACHINE;
//teach_4x16;

Scheduler*
create_scheduler (int argv, char **argc) {

  Scheduler *sched;

  if (argv >= 2) {
    if (*argc[1] == 'B' || *argc[1]=='b')
      sched = new Scheduler(num_procs);
    else if (*argc[1] == 'W' || *argc[1]=='w')
      sched = new WS_Scheduler(num_procs);
    else if (*argc[1] == 'P' || *argc[1]=='p')
      sched = new PWS_Scheduler(num_procs, *fan_outs, 10);
    else if (*argc[1] == 'H' || *argc[1]=='h')
      sched = new HR_Scheduler (num_procs, num_levels, fan_outs, sizes, block_sizes);
     else if (*argc[1] == '2')
       sched = new HR2Scheduler (num_procs, num_levels, fan_outs, sizes, block_sizes, 0);
     else if (*argc[1] == '3')
      sched = new HR3Scheduler (num_procs, num_levels, fan_outs, sizes, block_sizes);
     else if (*argc[1] == '4')
      sched = new HR4Scheduler (num_procs, num_levels, fan_outs, sizes, block_sizes);
     else if (*argc[1] == '5')
       sched = new HR2Scheduler (num_procs, num_levels, fan_outs, sizes, block_sizes, 1);
     else {
       print_usage();	
       exit(-1);					
     }	
  } else {
    print_usage();
    exit(-1);
  }

  return sched;
}

/* Set process affinity of calling thread
 * Spawned threads will inherit affinity */
int 
set_proc_affinity (uint proc_id) {
  int status;
  pthread_t thread = pthread_self();
  if ( proc_id != -1 ) {
    cpu_set_t affinity;
    CPU_ZERO ( &affinity );
    CPU_SET ( proc_id, &affinity );
    if ((status = pthread_setaffinity_np ( thread, sizeof(affinity), &affinity))
	!= 0) {
      std::cerr << "Setting thread affinity to "<<proc_id<<" failed with error value "
	//		<< strerror ( status ) <<std::endl;
		<<std::endl;
    } 
  }
  
  return status;
}

int
flush_cache (int procs, int L3_size) {
  int len=L3_size/sizeof(double);
  double *flush = new double[len];
  volatile double sum;
  for (int p=0; p<procs; ++p) {
    set_proc_affinity(p);
    for (int i=0; i<len; ++i)
      sum += ++flush[i];
  }
  delete flush;
  return sum;
}

long long int 
get_size (int argv, char **argc, int pos=2) {
  if (argv>pos)
    return atoi (argc[pos]);
  else 
    return -1;
}

void
stripe_teach (char *space, int alloc_size, int page_size=-1) {
#define TEACH_PAGE_SIZE 1<<21
  #define TEACH_SOCKETS 4
  if (page_size == -1) 
    page_size = TEACH_PAGE_SIZE;
  int num_pages = alloc_size/page_size;
  for (int i=0; i<TEACH_SOCKETS; ++i) {
    set_proc_affinity(i);
    for (int j=0; j<num_pages; ++j) {
      if (j%TEACH_SOCKETS == i) {
	*(space + j*page_size) = 0;
      }
    }
  }
}
